{
  "View": {
    "prefix": "v",
    "body": [
      "<View className=\"flex-1 items-center justify-center\">",
      "  $1",
      "</View>"
    ],
    "description": "A Simple View "
  },
  "Text": {
    "prefix": "t",
    "body": [
      "<Text variant=\"sm\" className=\"text-center\">",
      "  $1",
      "</Text>"
    ],
    "description": "A Simple Text"
  },
  "export *": {
    "prefix": "ex *",
    "body": ["export * from '.$1';"],
    "description": "export *"
  },
  "Component": {
    "prefix": "comp",
    "body": [
      "import * as React from 'react';",
      "",
      "import { Text, View } from '@/ui';",
      "",
      "type Props = {",
      "  $2",
      "};",
      "export const ${1:CompName} = ({}: Props) => {",
      "  return (",
      "    <View className=\"flex-1\">",
      "      <Text className=\"text-base\">${1:CompName} Component</Text>",
      "    </View>",
      "  );",
      "};",
      ""
    ],
    "description": "Component"
  },
  // https://snippet-generator.app/?description=useQuery+with+variables&tabtrigger=useqv&snippet=import+type+%7B+AxiosError+%7D+from+%27axios%27%3B%0Aimport+%7B+createQuery+%7D+from+%27react-query-kit%27%3B%0A%0Aimport+%7B+client+%7D+from+%27..%2Fcommon%27%3B%0A%0Atype+Variables+%3D+%7B%243%7D%3B%0Atype+Response+%3D%7B%244%7D%3B%0A%0Aexport+const+use%241+%3D+createQuery%3CResponse%2C+Variables%2C+AxiosError%3E%28%7B%0A++primaryKey%3A+%27%242%27%2C%0A++queryFn%3A+%28%7B+queryKey%3A+%5BprimaryKey%2C+variables%5D+%7D%29+%3D%3E+%7B%0A++++return+client%0A++++++.get%28%60%5C%24%7BprimaryKey%7D%2F%5C%24%7Bvariables.%24%7B5%7D%7D%60%29%0A++++++.then%28%28response%29+%3D%3E+response.data%29%3B%0A++%7D%2C%0A%7D%29%3B&mode=vscode
  "useQuery with variables": {
    "prefix": "useqv",
    "body": [
      "import type { AxiosError } from 'axios';",
      "import { createQuery } from 'react-query-kit';",
      "",
      "import { client } from '../common';",
      "",
      "type Variables = {$3};",
      "type Response ={$4};",
      "",
      "export const use$1 = createQuery<Response, Variables, AxiosError>({",
      "  primaryKey: '$2',",
      "  queryFn: ({ queryKey: [primaryKey, variables] }) => {",
      "    return client",
      "      .get(`\\${primaryKey}/\\${variables.${5}}`)",
      "      .then((response) => response.data);",
      "  },",
      "});"
    ],
    "description": "useQuery with variables"
  },
  //https://snippet-generator.app/?description=useQuery&tabtrigger=useq&snippet=import+type+%7B+AxiosError+%7D+from+%27axios%27%3B%0Aimport+%7B+createQuery+%7D+from+%27react-query-kit%27%3B%0A%0Aimport+%7B+client+%7D+from+%27..%2Fcommon%27%3B%0A%0Atype+Response+%3D+%7B%243%7D%3B%0Atype+Variables+%3D+void%3B%0A%0Aexport+const+use%241+%3D+createQuery%3CResponse%2C+Variables%2C+AxiosError%3E%28%7B%0A++primaryKey%3A+%60%242%60%2C%0A++queryFn%3A+%28%7B+queryKey%3A+%5BprimaryKey%5D+%7D%29+%3D%3E+%7B%0A++++return+client.get%28%60%5C%24%7BprimaryKey%7D%60%29.then%28%28response%29+%3D%3E+response.data.posts%29%3B%0A++%7D%0A%7D%29%3B&mode=vscode
  "useQuery": {
    "prefix": "useq",
    "body": [
      "import type { AxiosError } from 'axios';",
      "import { createQuery } from 'react-query-kit';",
      "",
      "import { client } from '../common';",
      "",
      "type Response = {$3};",
      "type Variables = void;",
      "",
      "export const use$1 = createQuery<Response, Variables, AxiosError>({",
      "  primaryKey: `$2`,",
      "  queryFn: ({ queryKey: [primaryKey] }) => {",
      "    return client.get(`\\${primaryKey}`).then((response) => response.data.posts);",
      "  }",
      "});"
    ],
    "description": "useQuery"
  },
  //https://snippet-generator.app/?description=useMutation+&tabtrigger=usem&snippet=import+type+%7B+AxiosError+%7D+from+%27axios%27%3B%0Aimport+%7B+createMutation+%7D+from+%27react-query-kit%27%3B%0A%0Aimport+%7B+client+%7D+from+%27..%2Fcommon%27%3B%0A%0Atype+Variables+%3D+%7B%243%7D%3B%0Atype+Response+%3D+%7B%244%7D%3B%0A%0Aexport+const+use%241+%3D+createMutation%3CResponse%2C+Variables%2C+AxiosError%3E%28%0A++async+%28variables%29+%3D%3E%0A++++client%28%7B%0A++++++url%3A+%27%242%27%2C%0A++++++method%3A+%27POST%27%2C%0A++++++data%3A+variables%2C%0A++++%7D%29.then%28%28response%29+%3D%3E+response.data%29%0A%29%3B&mode=vscode
  "useMutation ": {
    "prefix": "usem",
    "body": [
      "import type { AxiosError } from 'axios';",
      "import { createMutation } from 'react-query-kit';",
      "",
      "import { client } from '../common';",
      "",
      "type Variables = {$3};",
      "type Response = {$4};",
      "",
      "export const use$1 = createMutation<Response, Variables, AxiosError>({",
      "  mutationFn: async (variables) =>",
      "    client({",
      "      url: '$2',",
      "      method: 'POST',",
      "      data: variables,",
      "    }).then((response) => response.data)",
      "});"
    ],
    "description": "useMutation "
  },
  "navigate": {
    "prefix": "navigate",
    "body": ["const { navigate } = useNavigation();", ""],
    "description": "navigate"
  },
  "useState": {
    "prefix": "useState",
    "body": ["const [${1:text}, set${1:Text}] = useState('');"],
    "description": "use state react hook"
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": ["useEffect(() => {", "  $1", "}, [$2]);"],
    "description": "use effect react hook"
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": ["const ${1:variable} = useMemo(() => {", "  $2", "}, [$3]);"],
    "description": "use memo react hook"
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": ["const ${1:variable} = useCallback(() => {", "  $2", "}, [$3]);"],
    "description": "use callback react hook"
  },
  "useRef": {
    "prefix": "useRef",
    "body": ["const ${1:variable} = useRef();"],
    "description": "use ref react hook"
  },
  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:variable} = useContext(${2:Context});"],
    "description": "use context react hook"
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState});"
    ],
    "description": "use reducer react hook"
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": ["useImperativeHandle(${1:ref}, () => ({", "  $2", "}), [$3]);"],
    "description": "use imperative handle react hook"
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": ["useLayoutEffect(() => {", "  $1", "}, [$2]);"],
    "description": "use layout effect react hook"
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": ["useDebugValue(${1:value});"],
    "description": "use debug value react hook"
  },
  "useQueryClient": {
    "prefix": "useQueryClient",
    "body": ["const queryClient = useQueryClient();"],
    "description": "use query client react hook"
  },
  "useInfiniteQuery": {
    "prefix": "useInfiniteQuery",
    "body": [
      "const { data, error, fetchNextPage, hasNextPage, isFetching, isFetchingNextPage, status } = useInfiniteQuery('$1', ({ pageParam = 0 }) => {",
      "  return client.get(`$2?page=${pageParam}`).then((response) => response.data);",
      "}, {",
      "  getNextPageParam: (lastPage) => lastPage.nextPageParam,",
      "});"
    ],
    "description": "use infinite query react hook"
  },
  "useMutation": {
    "prefix": "useMutation",
    "body": [
      "const { mutate, data, error, isLoading, isSuccess } = useMutation('$1', (variables) => {",
      "  return client({",
      "    url: '$2',",
      "    method: 'POST',",
      "    data: variables,",
      "  }).then((response) => response.data);",
      "});"
    ],
    "description": "use mutation react hook"
  },
  "useQuery": {
    "prefix": "useQuery",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get('$2').then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook"
  },
  "useQuery with variables": {
    "prefix": "useQueryv",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get(`$2/${$3}`).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with variables"
  },
  "useQuery with variables and params": {
    "prefix": "useQueryvp",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get(`$2/${$3}`, { params: { $4 } }).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with variables and params"
  },
  "useQuery with params": {
    "prefix": "useQueryp",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get('$2', { params: { $3 } }).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with params"
  },
  "useQuery with params and variables": {
    "prefix": "useQuerypv",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get(`$2/${$3}`, { params: { $4 } }).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with params and variables"
  },
  "useQuery with params and variables and headers": {
    "prefix": "useQuerypvh",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get(`$2/${$3}`, { params: { $4 }, headers: { $5 } }).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with params and variables and headers"
  },
  "useQuery with params and headers": {
    "prefix": "useQueryph",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get('$2', { params: { $3 }, headers: { $4 } }).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with params and headers"
  },
  "useQuery with headers": {
    "prefix": "useQueryh",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get('$2', { headers: { $3 } }).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with headers"
  },
  "useQuery with variables and headers": {
    "prefix": "useQueryvh",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get(`$2/${$3}`, { headers: { $4 } }).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with variables and headers"
  },
  "useQuery with variables and params and headers": {
    "prefix": "useQueryvph",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.get(`$2/${$3}`, { params: { $4 }, headers: { $5 } }).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with variables and params and headers"
  },
  "handle": {
    "prefix": "handle",
    "body": [
      "  const ${1:handle} = (${2:\\{\\}:\\{\\}) => {",
      "      ${3:console.log(\"hello\")}",
      "  };"
    ],
    "description": "handle"
  },
  "useQuery with variables and params and headers and method": {
    "prefix": "useQueryvphm",
    "body": [
      "const { data, error, isLoading, isSuccess } = useQuery('$1', () => {",
      "  return client.$6(`$2/${$3}`, { params: { $4 }, headers: { $5 } }).then((response) => response.data);",
      "});"
    ],
    "description": "use query react hook with variables and params and headers and method"
  }
}
